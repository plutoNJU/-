分支限界法
回溯法求解最优化问题是从根节点出发，按照深度优先策略搜索
问题的解空间树，在搜索过程中，如果某节点所代表的部分解
不满足约束条件，则对以该节点为根的子树进行剪枝；否则按
深度优先策略搜索以该节点为根的子树，当搜索到一个满足约束
条件的叶子节点时，就找到了一个可行解，对整个解空间树的搜索
结束后，所有可行解中的最优解就是问题的最优解。回溯法虽然
实行剪枝减少了搜索空间，但是，整个搜索过程是按深度优先策略
机械的进行，所以，这种搜索仍然是盲目的。
分支界限法首先确定一个合理的限界函数，并根据限界函数确定
目标函数的界。然后按照广度优先策略搜索问题的解空间树，
在分支节点上，依次扩展该节点的所有孩子节点，分别估算这些
孩子节点的目标函数的可能取值，如果某孩子节点的目标函数的
可能取值超出目标函数的界，则将其丢弃，因为从这个节点生成的解
不会比目前已经得到的解更好；否则，将其加入待处理节点表中。
依次从待处理节点表中选取使目标函数取得极值的节点成为当前
扩展节点，重复上述过程，直至找到最优解。
显然，应用分支界限法的关键问题如下。
（1）	如何确定合适的限界函数。分支界限法在遍历过程中根据
限界函数估算某节点的目标函数的可能取值。好的限界函数不仅
计算简单，还要保证最优解在搜索空间中，更重要的是能在搜索
的早期对超出目标函数界的节点进行剪枝，减少搜索空间，从而
尽快找到问题的最优解。对于具体问题实例，有时需要进行大量
实验，才能确定一个合理的限界函数。
（2）	如何组织待处理节点表。为了能在待处理节点表中选取使
目标函数取得极值的节点时提高查找效率，待处理节点表可以
采用堆的形式，也可以采用优先队列的形式存储。
（3）	如何确定最优解的各个分量。分支界限法跳跃式处理
解空间树中的节点，因此，当搜索到某个叶子节点的目标函数
在待处理节点表取得极值时，求得了问题的最优值，但是，
无法求得该叶子节点对应的最优解的各个分量。因此，必须
保存搜索过程经过的路径信息。
分支界限法和回溯法实际上都属于蛮力穷举法，当然不能只当
它有很好的最坏时间复杂性，遍历具有指数阶个节点的解空间树，
在最坏的情况下，时间复杂度肯定为指数阶。与回溯法不同的是，
分支界限法首先扩展姐空间树中上层节点，并采用限界函数，有利于
实行大范围剪枝，同时，根据限界函数不断调整搜索方向，选择最
有可能取得最优解的子树优先进行搜索。所以，如果设计了一个好
的限界函数并选择了节点的合理扩展顺序，分支界限法可以快速得到问
题的解。
分支界限法可以对许多组合问题的较大规模的输入实例在合理的时间内
求解，然而，对于具体的问题实例，很难预测分支界限法的搜索行为，
无法预先判定哪些实例可以在合理的时间范围内求解，哪些实例不能在
合理时间范围内求解。
分支界限法的较高效率是付出一定代价为基础的，其工作方式也造成了
算法设计的复杂性。


