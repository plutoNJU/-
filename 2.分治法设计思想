分治法将一个难以解决的大问题划分成一些规模较小的子问题，分别求解各个子问题，再合并子问题的解得到原问题的解。一般分为三个阶段：
1.划分：把规模为n的问题划分为k个（通常为2）规模较小的子问题；
2.求解子问题：各子问题的解法与原问题的解法通常是相同的，可以用递归的方法解决各个子问题，有时递归处理也可以用循环解决；
3.合并：把各个子问题的解合并起来，合并的代价因情况不同有很大差异，分治法的效率很大程度上依赖于合并的实现。
不是所有的分治法都比简单的蛮力法更有效（比如计算a^n），但正确使用分治法往往比其他算法设计方法效率更高，事实上，分治法孕育了CS中许多重要的和有效的算法。


分治法的适用条件：

分治法所能解决的问题一般具有以下几个特征：

1.该问题的规模缩小到一定的程度就可以容易地解决；因为问题的计算复杂性一般是随着问题规模的增加而增加，因此大部分问题满足这个特征。
2.该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质这条特征是应用分治法的前提，它也是大多数问题可以满足的，此特征反映了递归思想的应用
3。利用该问题分解出的子问题的解可以合并为该问题的解；能否利用分治法完全取决于问题是否具有这条特征，如果具备了前两条特征，而不具备第三条特征，则可以考虑贪心算法或动态规划。
4.该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子问题。这条特征涉及到分治法的效率，如果各子问题是不独立的，则分治法要做许多不必要的工作，重复地解公共的子问题，此时虽然也可用分治法，但一般用动态规划较好。
--------------------- 
作者：michael_jin92 
来源：CSDN 
原文：https://blog.csdn.net/Rocky95/article/details/8927212 
版权声明：本文为博主原创文章，转载请附上博文链接！
